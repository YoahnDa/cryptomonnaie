// <auto-generated />
using System;
using Backend_Crypto.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Backend_Crypto.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend_Crypto.Models.AuthToken", b =>
                {
                    b.Property<int>("IdToken")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdToken"));

                    b.Property<DateTime>("DateExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IdTransaction")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdToken");

                    b.HasIndex("IdTransaction");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Backend_Crypto.Models.Crypto", b =>
                {
                    b.Property<int>("IdCrypto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCrypto"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Symbole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdCrypto");

                    b.HasIndex("Nom")
                        .IsUnique();

                    b.HasIndex("Symbole")
                        .IsUnique();

                    b.ToTable("Cryptos");
                });

            modelBuilder.Entity("Backend_Crypto.Models.HistoriquePrix", b =>
                {
                    b.Property<int>("IdHistorique")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdHistorique"));

                    b.Property<DateTime>("DateChange")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double>("PrixCrypto")
                        .HasColumnType("double precision");

                    b.Property<int>("idCrypto")
                        .HasColumnType("integer");

                    b.HasKey("IdHistorique");

                    b.HasIndex("idCrypto");

                    b.ToTable("Historiques");
                });

            modelBuilder.Entity("Backend_Crypto.Models.Ordre", b =>
                {
                    b.Property<int>("IdOrdre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdOrdre"));

                    b.Property<double>("AmountCrypto")
                        .HasColumnType("double precision");

                    b.Property<int?>("IdTransaction")
                        .HasColumnType("integer");

                    b.Property<double>("PrixUnitaire")
                        .HasColumnType("double precision");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdOrdre");

                    b.HasIndex("IdTransaction")
                        .IsUnique();

                    b.ToTable("Ordres");
                });

            modelBuilder.Entity("Backend_Crypto.Models.Portefeuille", b =>
                {
                    b.Property<int>("IdPortefeuille")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPortefeuille"));

                    b.Property<double>("Fond")
                        .HasColumnType("double precision");

                    b.Property<int>("IdUser")
                        .HasColumnType("integer");

                    b.HasKey("IdPortefeuille");

                    b.HasIndex("IdUser")
                        .IsUnique();

                    b.ToTable("Portefeuilles");
                });

            modelBuilder.Entity("Backend_Crypto.Models.StockPortefeuille", b =>
                {
                    b.Property<int>("IdPorteFeuille")
                        .HasColumnType("integer");

                    b.Property<int>("IdCrypto")
                        .HasColumnType("integer");

                    b.Property<double>("Stock")
                        .HasColumnType("double precision");

                    b.HasKey("IdPorteFeuille", "IdCrypto");

                    b.HasIndex("IdCrypto");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Backend_Crypto.Models.Transaction", b =>
                {
                    b.Property<int>("IdTransaction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTransaction"));

                    b.Property<DateTime>("DateTransaction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("IdPortefeuille")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("IdTransaction");

                    b.HasIndex("IdPortefeuille");

                    b.ToTable("Transac");
                });

            modelBuilder.Entity("Backend_Crypto.Models.AuthToken", b =>
                {
                    b.HasOne("Backend_Crypto.Models.Transaction", "Transac")
                        .WithMany("TokenAuth")
                        .HasForeignKey("IdTransaction")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transac");
                });

            modelBuilder.Entity("Backend_Crypto.Models.HistoriquePrix", b =>
                {
                    b.HasOne("Backend_Crypto.Models.Crypto", "CryptoChange")
                        .WithMany("Historiques")
                        .HasForeignKey("idCrypto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CryptoChange");
                });

            modelBuilder.Entity("Backend_Crypto.Models.Ordre", b =>
                {
                    b.HasOne("Backend_Crypto.Models.Transaction", "Transac")
                        .WithOne("Ordre")
                        .HasForeignKey("Backend_Crypto.Models.Ordre", "IdTransaction")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Transac");
                });

            modelBuilder.Entity("Backend_Crypto.Models.StockPortefeuille", b =>
                {
                    b.HasOne("Backend_Crypto.Models.Crypto", "CryptoIn")
                        .WithMany("StockClient")
                        .HasForeignKey("IdCrypto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Crypto.Models.Portefeuille", "PorteFeuilleOwn")
                        .WithMany("Stock")
                        .HasForeignKey("IdPorteFeuille")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CryptoIn");

                    b.Navigation("PorteFeuilleOwn");
                });

            modelBuilder.Entity("Backend_Crypto.Models.Transaction", b =>
                {
                    b.HasOne("Backend_Crypto.Models.Portefeuille", "PortefeuilleOwner")
                        .WithMany("Transac")
                        .HasForeignKey("IdPortefeuille")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PortefeuilleOwner");
                });

            modelBuilder.Entity("Backend_Crypto.Models.Crypto", b =>
                {
                    b.Navigation("Historiques");

                    b.Navigation("StockClient");
                });

            modelBuilder.Entity("Backend_Crypto.Models.Portefeuille", b =>
                {
                    b.Navigation("Stock");

                    b.Navigation("Transac");
                });

            modelBuilder.Entity("Backend_Crypto.Models.Transaction", b =>
                {
                    b.Navigation("Ordre");

                    b.Navigation("TokenAuth");
                });
#pragma warning restore 612, 618
        }
    }
}
